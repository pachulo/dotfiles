" Ideas from:
" Source: https://github.com/bhilburn/dotfiles/blob/master/vim/
" And from Steve Losh's spectacular vimrc.
" Source: http://bitbucket.org/sjl/dotfiles/src/tip/vim/

" Ignore compatibility issues with Vi. Really don't know why ViM still defaults
" to this. Especially gViM.
set nocompatible

" To enable Pathogen, we have to first disable the filetype, load the bundles,
" and then re-enable.
filetype off
call pathogen#infect()
call pathogen#helptags()
filetype plugin indent on
syntax on

" General Options
set encoding=utf-8
set autoindent
set showmode
set showcmd
set hidden
set visualbell
set ttyfast
set ruler
set backspace=indent,eol,start
set number
set norelativenumber
set laststatus=2
set history=1000
set list
set listchars=tab:▸\ ,trail:·,extends:❯,precedes:❮
set shell=/bin/bash\ --login
set matchtime=3
set showbreak=↪
set splitbelow
set splitright
set fillchars=diff:⣿,vert:│
set autowrite
set autoread
set shiftround
set title
set linebreak
"set spellfile=~/.vim/custom-dictionary.utf-8.add
set colorcolumn=+1
set modelines=5

" Disabling this because vim-airline doesn't like it
"set lazyredraw

" Set options regarding the undo history and undo tree depth
set undofile
set undoreload=10000
set undolevels=512

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800

" Resize splits when the window is resized
"au VimResized * :wincmd =

" Only show cursorline in the current window and in normal mode.
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" Only shown when not in insert mode so I don't go insane.
augroup trailing
    au!
    au InsertEnter * :set listchars+=eol:¬
    au InsertLeave * :set listchars-=eol:¬
augroup END


" Make sure Vim returns to the same line when you reopen a file.
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" Spacing and tabbing
set expandtab
set smarttab
set softtabstop=4
set shiftwidth=4
set wrap
set textwidth=80
set formatoptions=qrn1

" Keep the current working line in the center of the screen
set scrolloff=3

" Get those annoying temporary files out of the working directory
set backup                       " enable backups
set undodir=~/.vim/tmp/undo/     " undo files
set backupdir=~/.vim/tmp/backup/ " backups
set directory=~/.vim/tmp/swap/   " swap files
let g:yankring_history_dir='~/.vim/tmp/yankring'

" Make those folders automatically if they don't already exist.
if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" Leader key remapping
let mapleader = ","
let maplocalleader = "\\"
map <leader><space> :noh<cr>

" <ESC> is really far away
imap <c-d> <ESC>
nnoremap <c-d> <ESC>
vnoremap <c-d> <ESC>
cnoremap <c-d> <ESC>

" Toggle line numbers
nnoremap <leader>n :setlocal number!<cr>

" Show contents of registers
nnoremap <leader>r :registers<cr>

" Ctags  Rebuild (mnemonic CR -> <cr>)
nnoremap <leader><cr> :silent !ctags -R --exclude=.git --exclude=build .<cr>:redraw!<cr>



" Rainbow {{{
let g:rainbow_active = 1
" }}}

" Solarized {{{
syntax enable
set background=dark
if has('gui_running')
    set background=dark
else
    set background=dark
    let g:solarized_termcolors=256
endif
colorscheme solarized
" }}}

" NERD Tree {{{
noremap  <F2> :NERDTreeToggle<cr>
inoremap <F2> <esc>:NERDTreeToggle<cr>

augroup ps_nerdtree
    au!

    au Filetype nerdtree setlocal nolist
    " au Filetype nerdtree nnoremap <buffer> K :q<cr>
augroup END

let NERDTreeHighlightCursorline = 1
let NERDTreeIgnore = ['.vim$', '\~$', '.*\.pyc$', 'pip-log\.txt$', 'whoosh_index',
                    \ 'xapian_index', '.*.pid', 'monitor.py', '.*-fixtures-.*.json',
                    \ '.*\.o$', 'db.db', 'tags.bak', '.*\.pdf$', '.*\.mid$',
                    \ '.*\.midi$']

" Disables display of the 'Bookmarks' label and 'Press ? for help' text.
let NERDTreeDirArrows = 1
" Tells the NERD tree if/when it should change vim's current working directory.
let NERDTreeChDirMode = 2
"let NERDChristmasTree = 1
" Jump to the first child of the current nodes parent.
let NERDTreeMapJumpFirstChild = 'gK'
" }}}

" Tagbar {{{
inoremap <F7> :TagbarToggle<CR>
nnoremap <F7> :TagbarToggle<CR>
vnoremap <F7> :TagbarToggle<CR>
" }}}

" Limelight {{{
" https://zenbro.github.io/2015/06/09/meditating-on-code.html
nmap <silent> gl :Limelight!!<CR>
xmap gl <Plug>(Limelight)
let g:limelight_default_coefficient = 0.7
"let g:limelight_paragraph_span = 1
" }}}
